# vim:ft=kitty

kitty_mod ctrl+shift
clear_all_shortcuts yes
clear_all_mouse_actions no

font_family Cousine Regular
bold_font Cousine Bold
italic_font Cousine Italic
bold_italic_font Cousine Bold Italic
font_size 11.0
text_composition_strategy platform
text_fg_override_threshold 0

cursor_text_color background
cursor_shape block
cursor_beam_thickness 1.5
cursor_underline_thickness 2.0
cursor_blink_interval -1
cursor_stop_blinking_after 5.0
scrollback_lines 5000
scrollback_fill_enlarged_window no

mouse_hide_wait 3.0
url_style curly
url_prefixes file ftp ftps git http https kitty sftp ssh
detect_urls yes
url_excluded_characters
show_hyperlink_targets yes
copy_on_select yes
strip_trailing_spaces smart
open_url_with default
paste_actions confirm-if-large, filter

# filter:
#     Run the filter_paste() function from the file paste-actions.py in
#     the kitty config directory on the pasted text. The text returned by the
#     function will be actually pasted.

select_by_word_characters @-./_~?&=%+#
select_by_word_characters_forward
click_interval -1.0
focus_follows_mouse no
pointer_shape_when_grabbed arrow
default_pointer_shape beam
pointer_shape_when_dragging hand

# Mouse actions

# Mouse buttons can be mapped to perform arbitrary actions. The
# syntax is:

# .. code-block:: none

#     mouse_map button-name event-type modes action

# Where button-name is one of left, middle, right, b1 ... b8 with
# added keyboard modifiers. For example: ctrl+shift+left refers to
# holding the Ctrl+Shift keys while clicking with the left mouse
# button. The value b1 ... b8 can be used to refer to up to eight
# buttons on a mouse.

# event-type is one of press, release, doublepress, triplepress,
# click, doubleclick. modes indicates whether the action is performed
# when the mouse is grabbed by the program running in the terminal,
# or not. The values are grabbed or ungrabbed or a comma separated
# combination of them. grabbed refers to when the program running in
# the terminal has requested mouse events. Note that the click and
# double click events have a delay of click_interval to disambiguate
# from double and triple presses.

# You can run kitty with the kitty --debug-input command line option
# to see mouse events. See the builtin actions below to get a sense
# of what is possible.

# If you want to unmap an action, map it to no_op. For example, to
# disable opening of URLs with a plain click:

#     mouse_map left click ungrabbed no_op

# See all the mappable actions including mouse actions here
# <https://sw.kovidgoyal.net/kitty/actions/>.

# .. note:
#     Once a selection is started, releasing the button that started it will
#     automatically end it and no release event will be dispatched.

# Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#  First check for a selection and if one exists do nothing. Then
#  check for a link under the mouse cursor and if one exists, click
#  it. Finally check if the click happened at the current shell
#  prompt and if so, move the cursor to the click location. Note
#  that this requires shell integration
#  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

# Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#  Same as above, except that the action is performed even when the
#  mouse is grabbed by the program running in the terminal.

# Click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#  Variant with Ctrl+Shift is present because the simple click based
#  version has an unavoidable delay of click_interval, to
#  disambiguate clicks from double clicks.

# Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#  Prevent this press event from being sent to the program that has
#  grabbed the mouse, as the corresponding release event is used to
#  open a URL.

# Paste from the primary selection
# mouse_map middle release ungrabbed paste_from_selection

# Start selecting text
# mouse_map left press ungrabbed mouse_selection normal

# Start selecting text in a rectangle
# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

# Select a word
# mouse_map left doublepress ungrabbed mouse_selection word

# Select a line
# mouse_map left triplepress ungrabbed mouse_selection line

# Select line from point
# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#  Select from the clicked point to the end of the line.

# Extend the current selection
# mouse_map right press ungrabbed mouse_selection extend

#  If you want only the end of the selection to be moved instead of
#  the nearest boundary, use move-end instead of extend.

# Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

# Start selecting text even when grabbed
# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

# Start selecting text in a rectangle even when grabbed
# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

# Select a word even when grabbed
# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

# Select a line even when grabbed
# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

# Select line from point even when grabbed
# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#  Select from the clicked point to the end of the line even when
#  grabbed.

# Extend the current selection even when grabbed
# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

# Show clicked command output in pager
# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

# Performance tuning

# repaint_delay 10

# Delay between screen updates (in milliseconds). Decreasing it,
# increases frames-per-second (FPS) at the cost of more CPU usage.
# The default value yields ~100 FPS which is more than sufficient for
# most uses. Note that to actually achieve 100 FPS, you have to
# either set sync_to_monitor to no or use a monitor with a high
# refresh rate. Also, to minimize latency when there is pending input
# to be processed, this option is ignored.

input_delay 3
sync_to_monitor yes

enable_audio_bell no
window_alert_on_bell yes
bell_on_tab "ðŸ”” "
command_on_bell none

remember_window_size no
initial_window_width 640
initial_window_height 400
enabled_layouts *

# window_resize_step_cells 2
# window_resize_step_lines 2

# The step size (in units of cell width/cell height) to use when
# resizing kitty windows in a layout with the shortcut
# start_resizing_window. The cells value is used for horizontal
# resizing, and the lines value is used for vertical resizing.

# window_border_width 0.5pt

# The width of window borders. Can be either in pixels (px) or pts
# (pt). Values in pts will be rounded to the nearest number of pixels
# based on screen resolution. If not specified, the unit is assumed
# to be pts. Note that borders are displayed only when more than one
# window is visible. They are meant to separate multiple windows.

# draw_minimal_borders yes

# Draw only the minimum borders needed. This means that only the
# borders that separate the window from a neighbor are drawn. Note
# that setting a non-zero window_margin_width overrides this and
# causes all borders to be drawn.

# window_margin_width 0

# The window margin (in pts) (blank area outside the border). A
# single value sets all four sides. Two values set the vertical and
# horizontal sides. Three values set top, horizontal and bottom. Four
# values set top, right, bottom and left.

# single_window_margin_width -1

# The window margin to use when only a single window is visible (in
# pts). Negative values will cause the value of window_margin_width
# to be used instead. A single value sets all four sides. Two values
# set the vertical and horizontal sides. Three values set top,
# horizontal and bottom. Four values set top, right, bottom and left.

window_padding_width 0

# placement_strategy center

# When the window size is not an exact multiple of the cell size, the
# cell area of the terminal window will have some extra padding on
# the sides. You can control how that padding is distributed with
# this option. Using a value of center means the cell area will be
# placed centrally. A value of top-left means the padding will be
# only at the bottom and right edges.

inactive_text_alpha 1.0
hide_window_decorations no
resize_debounce_time 0.1 0.5
resize_in_steps no
visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ
confirm_os_window_close 1

# Tab bar

# tab_bar_edge bottom

# The edge to show the tab bar on, top or bottom.

# tab_bar_margin_width 0.0

# The margin to the left and right of the tab bar (in pts).

# tab_bar_margin_height 0.0 0.0

# The margin above and below the tab bar (in pts). The first number
# is the margin between the edge of the OS Window and the tab bar.
# The second number is the margin between the tab bar and the
# contents of the current tab.

# tab_bar_style fade

# The tab bar style, can be one of:

# fade
#     Each tab's edges fade into the background color. (See also tab_fade)
# slant
#     Tabs look like the tabs in a physical file.
# separator
#     Tabs are separated by a configurable separator. (See also
#     tab_separator)
# powerline
#     Tabs are shown as a continuous line with "fancy" separators.
#     (See also tab_powerline_style)
# custom
#     A user-supplied Python function called draw_tab is loaded from the file
#     tab_bar.py in the kitty config directory. For examples of how to
#     write such a function, see the functions named draw_tab_with_* in
#     kitty's source code: kitty/tab_bar.py. See also
#     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#     for examples from kitty users.
# hidden
#     The tab bar is hidden. If you use this, you might want to create
#     a mapping for the select_tab action which presents you with a list of
#     tabs and allows for easy switching to a tab.

# tab_bar_align left

# The horizontal alignment of the tab bar, can be one of: left,
# center, right.

# tab_bar_min_tabs 2

# The minimum number of tabs that must exist before the tab bar is
# shown.

# tab_switch_strategy previous

# The algorithm to use when switching to a tab when the current tab
# is closed. The default of previous will switch to the last used
# tab. A value of left will switch to the tab to the left of the
# closed tab. A value of right will switch to the tab to the right of
# the closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

# Control how each tab fades into the background when using fade for
# the tab_bar_style. Each number is an alpha (between zero and one)
# that controls how much the corresponding cell fades into the
# background, with zero being no fade and one being full fade. You
# can change the number of cells used by adding/removing entries to
# this list.

# tab_separator " â”‡"

# The separator between tabs in the tab bar when using separator as
# the tab_bar_style.

# tab_powerline_style angled

# The powerline separator style between tabs in the tab bar when
# using powerline as the tab_bar_style, can be one of: angled,
# slanted, round.

# tab_activity_symbol none

# Some text or a Unicode symbol to show on the tab if a window in the
# tab that does not have focus has some activity. If you want to use
# leading or trailing spaces, surround the text with quotes. See
# tab_title_template for how this is rendered.

# tab_title_max_length 0

# The maximum number of cells that can be used to render the text in
# a tab. A value of zero means that no limit is applied.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

# A template to render the tab title. The default just renders the
# title with optional symbols for bell and activity. If you wish to
# include the tab-index as well, use something like: {index}:{title}.
# Useful if you have shortcuts mapped for goto_tab N. If you prefer
# to see the index as a superscript, use {sup.index}. All data
# available is:

# title
#     The current tab title.
# index
#     The tab index usable with goto_tab N goto_tab shortcuts.
# layout_name
#     The current layout name.
# num_windows
#     The number of windows in the tab.
# num_window_groups
#     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
# tab.active_wd
#     The working directory of the currently active window in the tab
#     (expensive, requires syscall). Use active_oldest_wd to get
#     the directory of the oldest foreground process rather than the newest.
# tab.active_exe
#     The name of the executable running in the foreground of the currently
#     active window in the tab (expensive, requires syscall). Use
#     active_oldest_exe for the oldest foreground process.
# max_title_length
#     The maximum title length available.

# Note that formatting is done by Python's string formatting
# machinery, so you can use, for instance, {layout_name[:2].upper()}
# to show only the first two letters of the layout name, upper-cased.
# If you want to style the text, you can use styling directives, for
# example:
# `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
# Similarly, for bold and italic:
# `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
# Note that for backward compatibility, if {bell_symbol} or
# {activity_symbol} are not present in the template, they are
# prepended to it.

# active_tab_title_template none

# Template to use for active tabs. If not specified falls back to
# tab_title_template.

# active_tab_font_style   bold-italic
# inactive_tab_font_style normal

# Tab bar colors and styles.

# tab_bar_margin_color none

# Color for the tab bar margin area. Defaults to using the terminal
# background color for margins above and below the tab bar. For side
# margins the default color is chosen to match the background color
# of the neighboring tab.

# Color scheme

dim_opacity 0

# Color for marks of type 1
# mark1_foreground black

# Color for marks of type 1 (light steel blue)
# mark1_background #98d3cb

# Color for marks of type 2
# mark2_foreground black

# Color for marks of type 1 (beige)
# mark2_background #f2dcd3

# Color for marks of type 3
# mark3_foreground black

# Color for marks of type 3 (violet)
# mark3_background #f274bc

shell zsh
editor nvim
remote_control_password

# env

# Specify the environment variables to be set in all child processes.
# Using the name with an equal sign (e.g. env VAR=) will set it to
# the empty string. Specifying only the name (e.g. env VAR) will
# remove the variable from the child process' environment. Note that
# environment variables are expanded recursively, for example:

#     env VAR1=a
#     env VAR2=${HOME}/${VAR1}/b

# The value of VAR2 will be <path to home directory>/a/b.

# watcher

# Path to python file which will be loaded for watchers
# <https://sw.kovidgoyal.net/kitty/launch/#watchers>. Can be
# specified more than once to load multiple watchers. The watchers
# will be added to every kitty window. Relative paths are resolved
# relative to the kitty config directory. Note that reloading the
# config will only affect windows created after the reload.

update_check_interval 0

# startup_session none

# Path to a session file to use for all kitty instances. Can be
# overridden by using the kitty --session =none command line option
# for individual instances. See sessions
# <https://sw.kovidgoyal.net/kitty/overview/#sessions> in the kitty
# documentation for details. Note that relative paths are interpreted
# with respect to the kitty config directory. Environment variables
# in the path are expanded. Changing this option by reloading the
# config is not supported.

# clipboard_control write-clipboard write-primary read-clipboard read-primary

# clipboard_max_size 512

# The maximum size (in MB) of data from programs running in kitty
# that will be stored for writing to the system clipboard. A value of
# zero means no size limit is applied. See also clipboard_control.

file_transfer_confirmation_bypass
allow_hyperlinks yes
shell_integration enabled
allow_cloning ask
term xterm-kitty

# Keyboard shortcuts

# Keys are identified simply by their lowercase Unicode characters.
# For example: a for the A key, [ for the left square bracket key,
# etc. For functional keys, such as Enter or Escape, the names are
# present at Functional key definitions
# <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
# For modifier keys, the names are ctrl (control, âŒƒ), shift (â‡§), alt
# (opt, option, âŒ¥), super (cmd, command, âŒ˜). See also: GLFW mods
# <https://www.glfw.org/docs/latest/group__mods.html>

# On Linux you can also use XKB key names to bind keys that are not
# supported by GLFW. See XKB keys
# <https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
# keysyms.h> for a list of key names. The name to use is the part
# after the XKB_KEY_ prefix. Note that you can only use an XKB key
# name for keys that are not known as GLFW keys.

# Finally, you can use raw system key codes to map keys, again only
# for keys that are not known as GLFW keys. To see the system key
# code for a key, start kitty with the kitty --debug-input option,
# kitty will output some debug text for every key event. In that text
# look for native_code, the value of that becomes the key name in the
# shortcut. For example:

# .. code-block:: none

#     on_key_input: glfw key: 0x61 native_code: 0x61 action: PRESS mods: none text: 'a'

# Here, the key name for the A key is 0x61 and you can use it with:

#     map ctrl+0x61 something

# to map Ctrl+A to something.

# You can use the special action no_op to unmap a keyboard shortcut
# that is assigned in the default configuration:

#     map kitty_mod+space no_op

# If you would like kitty to completely ignore a key event, not even
# sending it to the program running in the terminal, map it to
# discard_event:

#     map kitty_mod+f1 discard_event

# You can combine multiple actions to be triggered by a single
# shortcut with combine action, using the syntax below:

#     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# For example:

#     map kitty_mod+e combine : new_window : next_layout

# This will create a new window and switch to the next available
# layout.

# You can use multi-key shortcuts with the syntax shown below:

#     map key1>key2>key3 action

# For example:

#     map ctrl+f>2 set_font_size 20

# Full list of actions <https://sw.kovidgoyal.net/kitty/actions/>.

# action_alias

# E.g. action_alias launch_tab launch --type=tab --cwd=current

# Define action aliases to avoid repeating the same options in
# multiple mappings. Aliases can be defined for any action and will
# be expanded recursively. For example, the above alias allows you to
# create mappings to launch a new tab in the current working
# directory without duplication:

#     map f1 launch_tab vim
#     map f2 launch_tab emacs

# Similarly, to alias kitten invocation:

#     action_alias hints kitten hints --hints-offset=0

# Copy to clipboard
map kitty_mod+c copy_to_clipboard

# Paste from clipboard
map kitty_mod+v paste_from_clipboard

# Paste from selection
map kitty_mod+s paste_from_selection

# Pass selection to program
map kitty_mod+o pass_selection_to_program

# You can pass the current selection to a terminal program running
# in a new kitty window, by using the @selection placeholder:

# map kitty_mod+y new_window less @selection

#  You can pipe the contents of the current screen and history
#  buffer as STDIN to an arbitrary program using launch --stdin-
#  source. For example, the following opens the scrollback buffer in
#  less in an overlay window:

#      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#  For more details on piping screen and buffer contents to external
#  programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#  You can pipe the output of the last command run in the shell
#  using the launch action. For example, the following opens the
#  output in less in an overlay window:

#      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#  To get the output of the first command on the screen, use
#  @first_cmd_output_on_screen. To get the output of the last jumped
#  to command, use @last_visited_cmd_output.

# Window management

#  You can open a new kitty window running an arbitrary program, for
#  example:

#      map kitty_mod+y launch mutt

#  You can open a new window with the current working directory set
#  to the working directory of the current window using:

#      map ctrl+alt+enter launch --cwd=current

#  You can open a new window that is allowed to control kitty via
#  the kitty remote control facility with launch --allow-remote-
#  control. Any programs running in that window will be allowed to
#  control kitty. For example:

#      map ctrl+enter launch --allow-remote-control some_program

#  You can open a new window next to the currently active window or
#  as the first window, with:

#      map ctrl+n launch --location=neighbor
#      map ctrl+f launch --location=first

#  For more details, see launch
#  <https://sw.kovidgoyal.net/kitty/launch/>.

# Next window
# map kitty_mod+] next_window

# Previous window
# map kitty_mod+[ previous_window

# Move window forward
# map kitty_mod+f move_window_forward

# Move window backward
# map kitty_mod+b move_window_backward

# Move window to top
# map kitty_mod+` move_window_to_top

# Start resizing window
# map kitty_mod+r start_resizing_window

# First window
# map kitty_mod+1 first_window

# Second window
# map kitty_mod+2 second_window

# Third window
# map kitty_mod+3 third_window

# Fourth window
# map kitty_mod+4 fourth_window

# Fifth window
# map kitty_mod+5 fifth_window

# Sixth window
# map kitty_mod+6 sixth_window

# Seventh window
# map kitty_mod+7 seventh_window

# Eighth window
# map kitty_mod+8 eighth_window

# Ninth window
# map kitty_mod+9 ninth_window

# Tenth window
# map kitty_mod+0 tenth_window

# Visually select and focus window
# map kitty_mod+f7 focus_visible_window

#  Display overlay numbers and alphabets on the window, and switch
#  the focus to the window when you press the key. When there are
#  only two windows, the focus will be switched directly without
#  displaying the overlay. You can change the overlay characters and
#  their order with option visual_window_select_characters.

# Visually swap window with another
# map kitty_mod+f8 swap_with_window

# Tab management

# Next tab
# map kitty_mod+right next_tab

# Previous tab
# map kitty_mod+left previous_tab

# New tab
# map kitty_mod+t new_tab

# Close tab
# map kitty_mod+q close_tab

# Move tab forward
# map kitty_mod+. move_tab_forward

# Move tab backward
# map kitty_mod+, move_tab_backward

# Set tab title
# map kitty_mod+alt+t set_tab_title

# You can also create shortcuts to go to specific tabs, with 1 being
# the first tab, 2 the second tab and -1 being the previously active
# tab, and any number larger than the last tab being the last tab:

#     map ctrl+alt+1 goto_tab 1
#     map ctrl+alt+2 goto_tab 2

# Just as with new_window above, you can also pass the name of
# arbitrary commands to run when using new_tab and new_tab_with_cwd.
# Finally, if you want the new tab to open next to the current tab
# rather than at the end of the tabs list, use:

#     map ctrl+t new_tab !neighbor [optional cmd to run]

# Layout management

# Next layout
# map kitty_mod+l next_layout

# You can also create shortcuts to switch to specific layouts:
# map ctrl+alt+t goto_layout tall
# map ctrl+alt+s goto_layout stack

# Switch back to the previous layout
# map ctrl+alt+p last_used_layout

# Select and act on visible text

# Use the hints kitten to select text and either pass it to an
# external program or insert it into the terminal or copy it to the
# clipboard.

# Open URL
# map kitty_mod+e open_url_with_hints

#  Open a currently visible URL using the keyboard. The program used
#  to open the URL is specified in open_url_with.

# Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#  Select a path/filename and insert it into the terminal. Useful,
#  for instance to run git commands on a filename output from a
#  previous git command.

# Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#  Select a path/filename and open it with the default open program.

# Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#  Select a line of text and insert it into the terminal. Useful for
#  the output of things like: `ls -1`.

# Insert selected word
# map kitty_mod+p>w kitten hints --type word --program -

#  Select words and insert into terminal.

# Insert selected hash
# map kitty_mod+p>h kitten hints --type hash --program -

#  Select something that looks like a hash and insert it into the
#  terminal. Useful with git, which uses SHA1 hashes to identify
#  commits.

# Open the selected file at the selected line
# map kitty_mod+p>n kitten hints --type linenum

#  Select something that looks like filename:linenum and open it in
#  vim at the specified line number.

# Open the selected hyperlink
# map kitty_mod+p>y kitten hints --type hyperlink

#  Select a hyperlink (i.e. a URL that has been marked as such by
#  the terminal program, for example, by `ls --hyperlink=auto`).

# The hints kitten has many more modes of operation that you can map
# to different shortcuts. For a full description see hints kitten
# <https://sw.kovidgoyal.net/kitty/kittens/hints/>.

# Base16 Nord - kitty color config
# Scheme by arcticicestudio
background #2E3440
foreground #E5E9F0
selection_background #E5E9F0
selection_foreground #2E3440
url_color #D8DEE9
cursor #E5E9F0
active_border_color #4C566A
inactive_border_color #3B4252
bell_border_color #BF616A
active_tab_background #2E3440
active_tab_foreground #E5E9F0
inactive_tab_background #3B4252
inactive_tab_foreground #D8DEE9
tab_bar_background #3B4252

# normal
color0 #2E3440
color1 #BF616A
color2 #A3BE8C
color3 #EBCB8B
color4 #81A1C1
color5 #B48EAD
color6 #88C0D0
color7 #E5E9F0

# bright
color8 #4C566A
color9 #BF616A
color10 #A3BE8C
color11 #EBCB8B
color12 #81A1C1
color13 #B48EAD
color14 #88C0D0
color15 #8FBCBB

# extended base16 colors
color16 #D08770
color17 #5E81AC
color18 #3B4252
color19 #434C5E
color20 #D8DEE9
color21 #ECEFF4

# Always wayland for display
linux_display_server wayland

# Reload kitty.conf
map kitty_mod+f5 load_config_file

# Debug kitty configuration
map kitty_mod+f6 debug_config

# Unicode input
map kitty_mod+u kitten unicode_input

# Send text, I'll find an use for this
# map ctrl+alt+a send_text all Special text

# Scrolling
map kitty_mod+k scroll_line_up
map kitty_mod+j scroll_line_down
map kitty_mod+page_up scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home scroll_home
map kitty_mod+end scroll_end
map kitty_mod+z scroll_to_prompt -1
map kitty_mod+x scroll_to_prompt 1

# For vim-kitty-navigator
map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j
map ctrl+k kitten pass_keys.py neighboring_window top ctrl+k
map ctrl+h kitten pass_keys.py neighboring_window left ctrl+h
map ctrl+l kitten pass_keys.py neighboring_window right ctrl+l

# Allow remote control
allow_remote_control yes
listen_on unix:@mykitty
listen_on unix:/tmp/kitty

# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten /home/padelvi/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
map kitty_mod+h kitty_scrollback_nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output
