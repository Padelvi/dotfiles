# vim:ft=kitty

kitty_mod ctrl+shift
clear_all_shortcuts yes
clear_all_mouse_actions no

font_family Cousine Regular
bold_font Cousine Bold
italic_font Cousine Italic
bold_italic_font Cousine Bold Italic
font_size 11.0
text_composition_strategy platform
text_fg_override_threshold 0

cursor_text_color background
cursor_shape block
cursor_beam_thickness 1.5
cursor_underline_thickness 2.0
cursor_blink_interval -1
cursor_stop_blinking_after 5.0
scrollback_lines 5000
scrollback_fill_enlarged_window no

mouse_hide_wait 3.0
url_style curly
url_prefixes file ftp ftps git http https kitty sftp ssh
detect_urls yes
url_excluded_characters
show_hyperlink_targets yes
copy_on_select yes
strip_trailing_spaces smart
open_url_with default
paste_actions confirm-if-large
select_by_word_characters @-./_~?&=%+#
select_by_word_characters_forward
click_interval -1.0
focus_follows_mouse no
pointer_shape_when_grabbed arrow
default_pointer_shape beam
pointer_shape_when_dragging hand

repaint_delay 10
input_delay 3
sync_to_monitor yes

enable_audio_bell no
window_alert_on_bell yes
bell_on_tab "ðŸ”” "
command_on_bell none

remember_window_size no
initial_window_width 640
initial_window_height 400
enabled_layouts *

window_resize_step_cells 2
window_resize_step_lines 2
window_border_width 0.5pt
draw_minimal_borders yes
window_margin_width 0
single_window_margin_width 0
window_padding_width 0
placement_strategy center

inactive_text_alpha 1.0
hide_window_decorations no
resize_debounce_time 0.1 0.5
resize_in_steps no
visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ
confirm_os_window_close 1

# Tab bar
tab_bar_edge top
tab_bar_margin_width 0.0
tab_bar_margin_height 5.0 5.0
tab_bar_align left
tab_bar_min_tabs 2
tab_switch_strategy right
tab_title_max_length 0
tab_bar_style powerline
tab_powerline_style angled
tab_activity_symbol " â–¶"

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

# A template to render the tab title. The default just renders the
# title with optional symbols for bell and activity. If you wish to
# include the tab-index as well, use something like: {index}:{title}.
# Useful if you have shortcuts mapped for goto_tab N. If you prefer
# to see the index as a superscript, use {sup.index}. All data
# available is:

# title
#     The current tab title.
# index
#     The tab index usable with goto_tab N goto_tab shortcuts.
# layout_name
#     The current layout name.
# num_windows
#     The number of windows in the tab.
# num_window_groups
#     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
# tab.active_wd
#     The working directory of the currently active window in the tab
#     (expensive, requires syscall). Use active_oldest_wd to get
#     the directory of the oldest foreground process rather than the newest.
# tab.active_exe
#     The name of the executable running in the foreground of the currently
#     active window in the tab (expensive, requires syscall). Use
#     active_oldest_exe for the oldest foreground process.
# max_title_length
#     The maximum title length available.

# Note that formatting is done by Python's string formatting
# machinery, so you can use, for instance, {layout_name[:2].upper()}
# to show only the first two letters of the layout name, upper-cased.
# If you want to style the text, you can use styling directives, for
# example:
# `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
# Similarly, for bold and italic:
# `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
# Note that for backward compatibility, if {bell_symbol} or
# {activity_symbol} are not present in the template, they are
# prepended to it.

# active_tab_title_template none

active_tab_font_style bold-italic
inactive_tab_font_style normal
tab_bar_margin_color none

dim_opacity 0

# Color for marks of type 1
# mark1_foreground black

# Color for marks of type 1 (light steel blue)
# mark1_background #98d3cb

# Color for marks of type 2
# mark2_foreground black

# Color for marks of type 1 (beige)
# mark2_background #f2dcd3

# Color for marks of type 3
# mark3_foreground black

# Color for marks of type 3 (violet)
# mark3_background #f274bc

shell zsh
editor nvim
remote_control_password

update_check_interval 0

# startup_session none

# Path to a session file to use for all kitty instances. Can be
# overridden by using the kitty --session =none command line option
# for individual instances. See sessions
# <https://sw.kovidgoyal.net/kitty/overview/#sessions> in the kitty
# documentation for details. Note that relative paths are interpreted
# with respect to the kitty config directory. Environment variables
# in the path are expanded. Changing this option by reloading the
# config is not supported.

clipboard_control write-clipboard write-primary read-clipboard read-primary
clipboard_max_size 0

file_transfer_confirmation_bypass
allow_hyperlinks yes
shell_integration enabled
allow_cloning ask
term xterm-kitty

# Keyboard shortcuts

# Keys are identified simply by their lowercase Unicode characters.
# For example: a for the A key, [ for the left square bracket key,
# etc. For functional keys, such as Enter or Escape, the names are
# present at Functional key definitions
# <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
# For modifier keys, the names are ctrl (control, âŒƒ), shift (â‡§), alt
# (opt, option, âŒ¥), super (cmd, command, âŒ˜). See also: GLFW mods
# <https://www.glfw.org/docs/latest/group__mods.html>

# On Linux you can also use XKB key names to bind keys that are not
# supported by GLFW. See XKB keys
# <https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
# keysyms.h> for a list of key names. The name to use is the part
# after the XKB_KEY_ prefix. Note that you can only use an XKB key
# name for keys that are not known as GLFW keys.

# Finally, you can use raw system key codes to map keys, again only
# for keys that are not known as GLFW keys. To see the system key
# code for a key, start kitty with the kitty --debug-input option,
# kitty will output some debug text for every key event. In that text
# look for native_code, the value of that becomes the key name in the
# shortcut. For example:

# .. code-block:: none

#     on_key_input: glfw key: 0x61 native_code: 0x61 action: PRESS mods: none text: 'a'

# Here, the key name for the A key is 0x61 and you can use it with:

#     map ctrl+0x61 something

# to map Ctrl+A to something.

# You can use the special action no_op to unmap a keyboard shortcut
# that is assigned in the default configuration:

#     map kitty_mod+space no_op

# If you would like kitty to completely ignore a key event, not even
# sending it to the program running in the terminal, map it to
# discard_event:

#     map kitty_mod+f1 discard_event

# You can combine multiple actions to be triggered by a single
# shortcut with combine action, using the syntax below:

#     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# For example:

#     map kitty_mod+e combine : new_window : next_layout

# This will create a new window and switch to the next available
# layout.

# You can use multi-key shortcuts with the syntax shown below:

#     map key1>key2>key3 action

# For example:

#     map ctrl+f>2 set_font_size 20

# Full list of actions <https://sw.kovidgoyal.net/kitty/actions/>.

# action_alias

# E.g. action_alias launch_tab launch --type=tab --cwd=current

# Define action aliases to avoid repeating the same options in
# multiple mappings. Aliases can be defined for any action and will
# be expanded recursively. For example, the above alias allows you to
# create mappings to launch a new tab in the current working
# directory without duplication:

#     map f1 launch_tab vim
#     map f2 launch_tab emacs

# Similarly, to alias kitten invocation:

#     action_alias hints kitten hints --hints-offset=0

map kitty_mod+c copy_to_clipboard
map kitty_mod+v paste_from_clipboard

#  You can pipe the contents of the current screen and history
#  buffer as STDIN to an arbitrary program using launch --stdin-
#  source. For example, the following opens the scrollback buffer in
#  less in an overlay window:

#      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#  For more details on piping screen and buffer contents to external
#  programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#  You can pipe the output of the last command run in the shell
#  using the launch action. For example, the following opens the
#  output in less in an overlay window:

#      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#  To get the output of the first command on the screen, use
#  @first_cmd_output_on_screen. To get the output of the last jumped
#  to command, use @last_visited_cmd_output.

# Window management

map kitty_mod+y new_window
map kitty_mod+s launch spt

# Next window
# map kitty_mod+] next_window

# Previous window
# map kitty_mod+[ previous_window

# Move window forward
# map kitty_mod+f move_window_forward

# Move window backward
# map kitty_mod+b move_window_backward

# Move window to top
# map kitty_mod+` move_window_to_top

# Start resizing window
# map kitty_mod+r start_resizing_window

# First window
# map kitty_mod+1 first_window

# Second window
# map kitty_mod+2 second_window

# Third window
# map kitty_mod+3 third_window

# Fourth window
# map kitty_mod+4 fourth_window

# Fifth window
# map kitty_mod+5 fifth_window

# Sixth window
# map kitty_mod+6 sixth_window

# Seventh window
# map kitty_mod+7 seventh_window

# Eighth window
# map kitty_mod+8 eighth_window

# Ninth window
# map kitty_mod+9 ninth_window

# Tenth window
# map kitty_mod+0 tenth_window

# Tab management
map kitty_mod+right next_tab
map kitty_mod+left previous_tab
map kitty_mod+t new_tab
map kitty_mod+q close_tab
map kitty_mod+. move_tab_forward
map kitty_mod+, move_tab_backward
map kitty_mod+alt+t set_tab_title
map alt+1 goto_tab 1
map alt+2 goto_tab 2
map alt+3 goto_tab 3
map alt+z goto_tab -1

# Layout management

# Next layout
# map kitty_mod+l next_layout

# You can also create shortcuts to switch to specific layouts:
# map ctrl+alt+t goto_layout tall
# map ctrl+alt+s goto_layout stack

# Switch back to the previous layout
# map ctrl+alt+p last_used_layout

# Select and act on visible text

# Use the hints kitten to select text and either pass it to an
# external program or insert it into the terminal or copy it to the
# clipboard.

# Open URL
# map kitty_mod+e open_url_with_hints

#  Open a currently visible URL using the keyboard. The program used
#  to open the URL is specified in open_url_with.

# Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#  Select a path/filename and insert it into the terminal. Useful,
#  for instance to run git commands on a filename output from a
#  previous git command.

# Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#  Select a path/filename and open it with the default open program.

# Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#  Select a line of text and insert it into the terminal. Useful for
#  the output of things like: `ls -1`.

# Insert selected word
# map kitty_mod+p>w kitten hints --type word --program -

#  Select words and insert into terminal.

# Insert selected hash
# map kitty_mod+p>h kitten hints --type hash --program -

#  Select something that looks like a hash and insert it into the
#  terminal. Useful with git, which uses SHA1 hashes to identify
#  commits.

# Open the selected file at the selected line
# map kitty_mod+p>n kitten hints --type linenum

#  Select something that looks like filename:linenum and open it in
#  vim at the specified line number.

# Open the selected hyperlink
# map kitty_mod+p>y kitten hints --type hyperlink

#  Select a hyperlink (i.e. a URL that has been marked as such by
#  the terminal program, for example, by `ls --hyperlink=auto`).

# The hints kitten has many more modes of operation that you can map
# to different shortcuts. For a full description see hints kitten
# <https://sw.kovidgoyal.net/kitty/kittens/hints/>.

# Base16 Nord - kitty color config
# Scheme by arcticicestudio
background #2E3440
foreground #E5E9F0
selection_background #E5E9F0
selection_foreground #2E3440
url_color #D8DEE9
cursor #E5E9F0
active_border_color #4C566A
inactive_border_color #3B4252
bell_border_color #BF616A
active_tab_background #2E3440
active_tab_foreground #E5E9F0
inactive_tab_background #3B4252
inactive_tab_foreground #D8DEE9
tab_bar_background #3B4252

# normal
color0 #2E3440
color1 #BF616A
color2 #A3BE8C
color3 #EBCB8B
color4 #81A1C1
color5 #B48EAD
color6 #88C0D0
color7 #E5E9F0

# bright
color8 #4C566A
color9 #BF616A
color10 #A3BE8C
color11 #EBCB8B
color12 #81A1C1
color13 #B48EAD
color14 #88C0D0
color15 #8FBCBB

# extended base16 colors
color16 #D08770
color17 #5E81AC
color18 #3B4252
color19 #434C5E
color20 #D8DEE9
color21 #ECEFF4

# Always wayland for display
linux_display_server wayland

# Reload kitty.conf
map kitty_mod+f5 load_config_file

# Unicode input
map kitty_mod+u kitten unicode_input

# Send text, I'll find an use for this
map ctrl+alt+a send_text all Special text

# Scrolling
map kitty_mod+k scroll_line_up
map kitty_mod+j scroll_line_down
map kitty_mod+page_up scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home scroll_home
map kitty_mod+end scroll_end
map kitty_mod+z scroll_to_prompt -1
map kitty_mod+x scroll_to_prompt 1

# For vim-kitty-navigator
map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j
map ctrl+k kitten pass_keys.py neighboring_window top ctrl+k
map ctrl+h kitten pass_keys.py neighboring_window left ctrl+h
map ctrl+l kitten pass_keys.py neighboring_window right ctrl+l

# Allow remote control
allow_remote_control yes
listen_on unix:@mykitty
listen_on unix:/tmp/kitty

# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten /home/padelvi/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
map kitty_mod+h kitty_scrollback_nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
